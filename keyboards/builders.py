from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup
from config.settings import GENRES, LANGUAGES


def get_genres_keyboard(user_id: int, lang: str = 'ru') -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏ –∫–Ω–∏–≥ –∏ –∫–Ω–æ–ø–∫–æ–π –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    """
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∂–∞–Ω—Ä–∞
    for genre in GENRES.keys():
        builder.button(text=genre, callback_data=f"genre_{genre}")
    
    # –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    builder.button(
        text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ" if lang == 'ru' else "‚≠ê Favorites", 
        callback_data="show_favorites"
    )
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ 2 –≤ —Ä—è–¥
    builder.adjust(2)
    return builder.as_markup()


def get_book_keyboard(user_id: int, lang: str = 'ru') -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–∏–≥–æ–π
    """
    builder = ReplyKeyboardBuilder()
    
    # –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    buttons = [
        ("üìÑ –°—Ç—Ä–∞–Ω–∏—Ü—ã", "üìÑ Pages"),
        ("üìù –û–ø–∏—Å–∞–Ω–∏–µ", "üìù Description"),
        ("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "‚≠ê Add to favorites"),
        ("‚û° –°–ª–µ–¥—É—é—â–∞—è", "‚û° Next"),
        ("üé≤ –ù–æ–≤—ã–π –∂–∞–Ω—Ä", "üé≤ New genre")
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —è–∑—ã–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for ru_text, en_text in buttons:
        text = ru_text if lang == 'ru' else en_text
        builder.button(text=text)
    
    # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    builder.adjust(2, 2, 1)
    return builder.as_markup(resize_keyboard=True)


def get_admin_keyboard(user_id: int, lang: str = 'ru') -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    """
    builder = InlineKeyboardBuilder()
    
    # –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    buttons = [
        ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìä Statistics"),
        ("üóÑÔ∏è –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", "üóÑÔ∏è Create backup"),
        ("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", "üßπ Clear cache"),
        ("üîô –ù–∞–∑–∞–¥", "üîô Back")
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —è–∑—ã–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for ru_text, en_text in buttons:
        text = ru_text if lang == 'ru' else en_text
        builder.button(
            text=text, 
            callback_data=f"admin_{ru_text.split()[0]}"
        )
    
    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    builder.adjust(1)
    return builder.as_markup()


def get_language_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")
    builder.button(text="üá¨üáß English", callback_data="lang_en")
    builder.adjust(2)
    return builder.as_markup()


def get_back_to_genres_keyboard(user_id: int, lang: str = 'ru') -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∂–∞–Ω—Ä–∞
    """
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚Üê –ö –∂–∞–Ω—Ä–∞–º" if lang == 'ru' else "‚Üê To genres",
        callback_data="back_to_genres"
    )
    return builder.as_markup()                                                         